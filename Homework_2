import org.apache.spark.util.StatCounter
import org.apache.spark.rdd.RDD
case class MatchData(id1: Int, id2: Int, scores: Array[Double], matched: Boolean)

val rawblocks = sc.textFile("block_1.csv")
def isHeader(line: String):Boolean={line.contains("id_1")}
val noheader = rawblocks.filter(x => !isHeader(x))
val first = noheader.take(1)
val line = first(0)
val pieces = line.split(',')
val id1 = pieces(0).toInt
val id2 = pieces(1).toInt

def toDouble(s: String) = {
if("?".equals(s)||"".equals(s)) Double.NaN else s.toDouble
}

def toBoolean(s: String) = {
if("".equals(s)) false else s.toBoolean
}

def toInt(s: String) = {
if("?".equals(s)||"".equals(s)) 0 else s.toInt
}

def parse(line: String) = {
val pieces = line.split(',')
val id1 = pieces(0).toInt
val id2 = pieces(1).toInt
val scores = pieces.slice(2,11).map(toDouble)
val matched = pieces(11).toBoolean
MatchData(id1, id2, scores, matched)
}


val parsed = noheader.map(line => parse(line)) //question 4



class NAStatCounter extends Serializable{
val stats: StatCounter = new StatCounter()
var missing: Long = 0
def add(x: Double): NAStatCounter = {
if(java.lang.Double.isNaN(x)){
missing+=1
} else{
stats.merge(x)
}
this
}
def merge (other: NAStatCounter): NAStatCounter = {
stats.merge(other.stats)
missing += other.missing
this
}
override def toString = {
"stats: " + stats.toString + "NaN: " + missing
}
}

object NAStatCounter extends Serializable{
def apply(x: Double) = new NAStatCounter().add(x)
}


def statsWithMissing(rdd: RDD[Array[Double]]): Array[NAStatCounter] = {
val nastats = rdd.mapPartitions((iter: Iterator[Array[Double]]) => {
val nas: Array[NAStatCounter] = iter.next().map(d => NAStatCounter(d))
iter.foreach(arr => {
nas.zip(arr).foreach { case (n, d) => n.add(d) }
})
Iterator(nas)
})
nastats.reduce((n1, n2) => {
n1.zip(n2).map { case (a, b) => a.merge(b) }
})
}

val isMatched = parsed.filter(_.matched)
val notMatched = parsed.filter(!_.matched)
val statsm = statsWithMissing(isMatched.map(_.scores))
val statsn = statsWithMissing(notMatched.map(_.scores))
statsm.zip(statsn).map { case(m, n) =>(m.missing + n.missing, m.stats.mean - n.stats.mean) }.foreach(println)

/*val statsm = statsWithMissing(parsed.filter(_.matched).map(_.scores)) 
val statsn = statsWithMissing(parsed.filter(!_.matched).map(_.scores))
statsm.zip(statsn).map { case(m, n) =>(m.missing + n.missing, m.stats.mean - n.stats.mean) }.foreach(println)*/
